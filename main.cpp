#include "ndtpso_slam/ndtcell.h"
#include "ndtpso_slam/ndtframe.h"
#include <chrono>
#include <eigen3/Eigen/Core>
#include <iostream>
#include <mutex>

using namespace Eigen;
using std::cout;
using std::endl;

static std::mutex matcher_mutex;
static NdtFrame ref_frame(Vector3d::Zero(), 20, 20, 1.5);
static NdtFrame global_map(Vector3d::Zero(), 200, 200, 1.5);
static NdtFrame current_frame(Vector3d::Zero(), 20, 20, 1.5);
static Vector3d global_trans, previous_trans, trans_estimate;
static unsigned int iter_num;

int main(int argc, char** argv)
{

    matcher_mutex.lock();

    //    static char iter_counter = 0;

    //    if (iter_counter++ < 5) {
    //        current_frame.loadLaser(scan->ranges, scan->angle_min, scan->angle_max);
    //    } else {
    //        iter_counter = 0;

    //    ros::Rate loop_rate(1);

    auto start = std::chrono::high_resolution_clock::now();

    vector<float> first_data = { 2.876000165939331, 2.872000217437744, 2.886000156402588, 2.8980002403259277, 2.9040000438690186, 2.9200000762939453, 2.9260001182556152, 2.9280002117156982, 2.940000057220459, 2.9560000896453857, 2.9780001640319824, 2.9860000610351562, 2.998000144958496, 3.0240001678466797, 3.0440001487731934, 3.064000129699707, 3.082000255584717, 3.1020002365112305, 3.126000165939331, 3.1560001373291016, 3.186000108718872, 3.204000234603882, 3.2300002574920654, 3.1540000438690186, 3.062000036239624, 3.004000186920166, 3.01200008392334, 3.0460002422332764, 3.0920002460479736, 3.134000062942505, 3.1640000343322754, 3.198000192642212, 3.250000238418579, 3.302000045776367, 3.3520002365112305, 3.380000114440918, 3.442000150680542, 3.496000051498413, 3.558000087738037, 3.624000072479248, 3.696000099182129, 3.7800002098083496, 3.886000156402588, 3.9700002670288086, 4.065999984741211, 4.1620001792907715, 4.242000102996826, 4.344000339508057, 4.464000225067139, 4.611999988555908, 4.75, 4.894000053405762, 5.054000377655029, 5.232000350952148, 5.38200044631958, 5.562000274658203, 6.054000377655029, 6.168000221252441, 6.354000091552734, 6.544000148773193, 6.750000476837158, 7.336000442504883, 7.304000377655029, 5.556000232696533, 5.514000415802002, 5.468000411987305, 5.504000186920166, 5.700000286102295, 5.88800048828125, 10.678000450134277, 10.67400074005127, 10.668000221252441, 10.67400074005127, 10.680000305175781, 9.494000434875488, 9.336000442504883, 9.192000389099121, 9.038000106811523, 9.028000831604004, 10.82800006866455, 10.808000564575195, 10.82800006866455, 10.870000839233398, 10.91200065612793, 10.952000617980957, 10.998000144958496, 11.040000915527344, 11.10200023651123, 11.152000427246094, 11.300000190734863, 8.814000129699707, 8.700000762939453, 8.748000144958496, 11.50200080871582, 11.540000915527344, 11.0260009765625, 7.9200005531311035, 7.664000511169434, 7.720000267028809, 7.782000541687012, 9.020000457763672, 8.714000701904297, 8.438000679016113, 8.178000450134277, 7.928000450134277, 7.652000427246094, 7.36400032043457, 6.478000164031982, 6.156000137329102, 5.982000350952148, 5.754000186920166, 5.534000396728516, 5.436000347137451, 5.248000144958496, 5.054000377655029, 4.940000057220459, 4.988000392913818, 5.038000106811523, 5.190000057220459, 5.082000255584717, 4.968000411987305, 3.932000160217285, 3.81600022315979, 3.702000141143799, 3.582000255584717, 3.510000228881836, 3.5180001258850098, 3.5500001907348633, 3.5980002880096436, 3.5400002002716064, 3.454000234603882, 3.388000249862671, 3.32200026512146, 2.9720001220703125, 2.8980002403259277, 2.8560001850128174, 2.802000045776367, 2.758000135421753, 2.7180001735687256, 2.6760001182556152, 2.634000062942505, 2.616000175476074, 2.6100001335144043, 2.6660001277923584, 2.7260000705718994, 2.884000062942505, 2.9560000896453857, 2.828000068664551, 2.7740001678466797, 2.750000238418579, 2.7220001220703125, 2.696000099182129, 2.680000066757202, 2.6560001373291016, 2.636000156402588, 2.620000123977661, 2.6020002365112305, 2.440000057220459, 2.4220001697540283, 2.3940000534057617, 2.388000011444092, 2.380000114440918, 2.364000082015991, 2.3519999980926514, 2.3440001010894775, 2.3320000171661377, 2.322000026702881, 2.31600022315979, 2.2980000972747803, 2.2940001487731934, 2.2980000972747803, 2.312000036239624, 2.454000234603882, 2.450000047683716, 2.450000047683716, 2.440000057220459, 2.442000150680542, 2.450000047683716, 2.442000150680542, 2.444000005722046, 2.448000192642212 };
    vector<float> second_data = { 2.7760000228881836, 2.7740001678466797, 2.7740001678466797, 2.758000135421753, 2.7660000324249268, 2.7680001258850098, 2.7720000743865967, 2.7740001678466797, 2.7800002098083496, 2.7840001583099365, 2.7900002002716064, 2.5180001258850098, 2.492000102996826, 2.496000051498413, 2.510000228881836, 2.51200008392334, 2.5340001583099365, 2.5360000133514404, 2.55400013923645, 2.56000018119812, 2.570000171661377, 2.5940001010894775, 2.6080000400543213, 2.620000123977661, 2.6560001373291016, 2.6500000953674316, 2.6620001792907715, 2.6760001182556152, 2.7080001831054688, 2.7400002479553223, 2.760000228881836, 2.7780001163482666, 2.81600022315979, 2.8380000591278076, 2.870000123977661, 2.9060001373291016, 2.9860000610351562, 3.0160000324249268, 3.052000045776367, 3.0920002460479736, 3.142000198364258, 3.190000057220459, 3.2260000705718994, 3.264000177383423, 3.314000129699707, 3.370000123977661, 3.4240002632141113, 3.4900002479553223, 3.570000171661377, 3.6600000858306885, 3.7180001735687256, 3.814000129699707, 3.9040002822875977, 3.9820001125335693, 4.084000110626221, 4.177999973297119, 4.264000415802002, 4.37600040435791, 4.498000144958496, 4.640000343322754, 4.970000267028809, 5.058000087738037, 5.188000202178955, 5.302000045776367, 5.440000057220459, 5.586000442504883, 5.728000164031982, 6.232000350952148, 4.400000095367432, 4.36400032043457, 4.304000377655029, 4.28000020980835, 4.36400032043457, 4.5, 4.636000156402588, 4.77400016784668, 9.290000915527344, 9.484000205993652, 9.486000061035156, 9.472000122070312, 9.504000663757324, 9.473999977111816, 8.360000610351562, 8.244000434875488, 8.098000526428223, 7.974000453948975, 7.836000442504883, 7.778000354766846, 7.926000595092773, 9.584000587463379, 9.598000526428223, 9.634000778198242, 9.668000221252441, 9.696000099182129, 9.744000434875488, 9.780000686645508, 9.832000732421875, 9.868000030517578, 9.930000305175781, 9.986000061035156, 8.054000854492188, 7.668000221252441, 7.498000144958496, 7.552000522613525, 7.598000526428223, 10.390000343322754, 10.020000457763672, 9.618000030517578, 6.8520002365112305, 6.630000114440918, 6.5360002517700195, 6.598000526428223, 6.64400053024292, 7.820000171661377, 7.570000171661377, 7.366000175476074, 7.148000240325928, 6.9720001220703125, 6.7860002517700195, 6.590000152587891, 6.380000114440918, 6.184000492095947, 5.4760003089904785, 5.278000354766846, 5.076000213623047, 4.982000350952148, 4.824000358581543, 4.702000141143799, 4.576000213623047, 4.488000392913818, 4.414000034332275, 4.308000087738037, 4.206000328063965, 4.104000091552734, 3.998000144958496, 4.01200008392334, 4.076000213623047, 4.148000240325928, 4.276000022888184, 4.208000183105469, 4.146000385284424, 4.082000255584717, 4.026000022888184, 3.9760000705718994, 3.9600002765655518, 3.114000082015991, 3.064000129699707, 3.00600004196167, 2.9600000381469727, 2.9060001373291016, 2.866000175476074, 2.814000129699707, 2.7800002098083496, 2.764000177383423, 2.81600022315979, 2.880000114440918, 2.9120001792907715, 2.872000217437744, 2.8340001106262207, 2.80400013923645, 2.7860000133514404, 2.752000093460083, 2.7280001640319824, 2.7100000381469727, 2.680000066757202, 2.628000020980835, 2.4180002212524414, 2.3980000019073486, 2.382000207901001, 2.3600001335144043, 2.3480000495910645, 2.3360002040863037, 2.320000171661377, 2.314000129699707, 2.2980000972747803, 2.2860000133514404, 2.2780001163482666, 2.2660000324249268, 2.264000177383423, 2.2720000743865967, 2.384000062942505 };
    ref_frame.loadLaser(first_data);
    current_frame.loadLaser(second_data);

    ref_frame.build();
    Vector3d current_trans;

    current_trans = ref_frame.align(trans_estimate, &current_frame);

    global_trans += current_trans;
    trans_estimate = current_trans / 2.;
    previous_trans = current_trans;
    ref_frame = current_frame;

    global_map.update(global_trans, &current_frame);
    ++iter_num;

    auto finish = std::chrono::high_resolution_clock::now();

    std::chrono::duration<double> elapsed = finish - start;

    std::cout << endl
              << "Elapsed time: " << elapsed.count() << " s\n";

    current_frame = NdtFrame(Vector3d::Zero(), 40, 40, 1.);
    //    loop_rate.sleep();
    //    }
    matcher_mutex.unlock();

    iter_num = 0;
    global_trans = Vector3d::Zero();
    previous_trans = Vector3d::Zero();
    trans_estimate = Vector3d::Zero();
}
